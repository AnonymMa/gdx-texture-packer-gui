apply plugin: "java"
apply plugin: "edu.sc.seis.macAppBundle"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.crashinvaders.texturepackergui.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");
project.ext.distOutputDir = "../distribution/output"
project.ext.distFileName = "$project.ext.appName-$project.ext.version"
project.ext.nsisCommand = "makensis /DFILENAME=\"$project.ext.distFileName\" installer-nsis.nsi"

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
dist.dependsOn classes

task distRelease(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    archiveName = "$project.ext.appName.$extension"
    destinationDir = project.distsDir;

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
distRelease.dependsOn classes

task zipRelease(type: Zip) {
    from distRelease
    from file("../distribution/files")
    archiveName = "$project.ext.distFileName.$extension"
    destinationDir = file("$project.ext.distOutputDir")
}
zipRelease.dependsOn distRelease

task nsisInstaller(type: Exec) {
    workingDir '../distribution'

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', "$project.ext.nsisCommand"
    } else {
        commandLine "$project.ext.nsisCommand"
    }
}
nsisInstaller.dependsOn zipRelease

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}

//region Mac App Bundle
macAppBundle {
    mainClassName = project.ext.mainClassName
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    bundleJRE = false
    appName = "GdxTexturePacker"
    dmgName = "gdx-texturepacker-$project.ext.version"
    icon = "icons.icns"
//    backgroundImage = "doc/macbackground.png"
}

// Since macAppBundle 2.1.6 doesn't let us customize jar assembling we will simply swap it by hand
task cleanAppJavaDir (type: Delete) {
    delete fileTree(dir: "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents/Java")
}
task copyUberJar (type: Copy) {
    from 'build/libs/desktop.jar'
    into "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents/Java"
}
task copyMacAppFiles (type: Copy) {
    from '../distribution/macApp'
    into "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents"
}
createApp.dependsOn copyUberJar, copyMacAppFiles
copyUberJar.dependsOn dist, cleanAppJavaDir
cleanAppJavaDir.dependsOn generatePlist
//endregion